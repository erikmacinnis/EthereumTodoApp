[{"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/index.js":"1","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/App.js":"2","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/ethereum/todo.js":"3","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/CreateTask.js":"4","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/DropDown.js":"5","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/Loader.js":"6","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/DisplayTasks.js":"7","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/InlineLoader.js":"8","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/ethereum/web3.js":"9"},{"size":146,"mtime":1657384560896,"results":"10","hashOfConfig":"11"},{"size":1887,"mtime":1662750443415,"results":"12","hashOfConfig":"11"},{"size":181,"mtime":1657384560896,"results":"13","hashOfConfig":"11"},{"size":1511,"mtime":1662582486763,"results":"14","hashOfConfig":"11"},{"size":317,"mtime":1657384560896,"results":"15","hashOfConfig":"11"},{"size":404,"mtime":1657384560896,"results":"16","hashOfConfig":"11"},{"size":7819,"mtime":1662582486763,"results":"17","hashOfConfig":"11"},{"size":191,"mtime":1657384560896,"results":"18","hashOfConfig":"11"},{"size":963,"mtime":1662582486763,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"jjdmhm",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/index.js",[],["40","41"],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/App.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/ethereum/todo.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/CreateTask.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/DropDown.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/Loader.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/DisplayTasks.js",["42","43"],"import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport Loader from './InlineLoader';\n\nconst DisplayTasks = ({count, setCompleted, resetTasks}) => {\n\n    const [tasks, setTasks] = useState([{id: 0}]);\n    const [tasksFormatted, setTasksFormatted] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect( () => {\n        setLoading(true);\n        createTaskList();\n    },[resetTasks])\n\n    useEffect( () => {\n        if (tasks[0].id === 1){\n            createFormattedTaskList();\n            setLoading(false);\n        }\n    }, [tasks])\n\n    const checkTask = async(id) => {\n        const task = await todo.methods.tasks(id).call();\n        const isChecked = task.completed;\n        if (!isChecked){\n            const accounts = await web3.eth.getAccounts();\n            try {\n                await todo.methods.checkTask(id).send({from: accounts[0]});\n\n            }catch(err) {\n                window.alert(\"The Transaction didn't go through\\n Please try again\")\n            }\n        }\n    }\n\n    const createTaskList = async () => {\n        // Creates the list for the incompleted tasks\n        const initialTasks = [];\n        // Creates the list for the completed tasks\n        // Used in CreateTask component\n        const completedTasks = [];\n        // This is just a dummy object\n        initialTasks.push({id: 1});\n        const counter = parseInt(count) + 1;\n        let i;\n        for (i = 1; i < counter; i++){\n            const task = await todo.methods.tasks(i).call();\n\n            if (!task.completed){\n                initialTasks.push(task); \n            } \n\n            else {\n                completedTasks.push(\n                    {\n                        key: task.id,\n                        text: task.content,\n                        value: task.content,\n                        image: {avatar: true, src: '/images/checkmark.png'}\n                    }\n                );\n            }        \n        }\n        setCompleted(completedTasks);\n        setTasks(initialTasks);\n    }\n\n    // Creates the list of rows for the grid\n    const createFormattedTaskList = () => {\n\n        const length = tasks.length;\n        // This is represents the tasks of the leftover incompleted row\n        const mod = (length - 1) % 3;\n        const taskRows = [];\n        let i;\n        for (i = 3; i < length; i += 3){\n            let taskRow = (\n                <Grid.Row key={i / 3}>\n                    <Grid.Column textAlign='center'>\n                        <div id={tasks[i-2].id} className=\"ui left floated compact segment\">\n                            <div style={{width: \"auto\"}} className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-2].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-2].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i-1} textAlign='center'>\n                        <div id={tasks[i-1].id} style={{width: \"100%\"}} className=\"ui left floated compact segment\">\n                            <div  className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-1].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-1].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i} textAlign='center'>\n                        <div id={tasks[i].id} className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n               )\n            taskRows.push(taskRow);\n       }\n       if (mod !== 0){\n           if (mod === 1){\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length - 1}textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => {\n                                    checkTask(tasks[length - 1].id)}}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n           else {\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length-2} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 2].id}\n                                   onClick={() => checkTask(tasks[length - 2].id)}\n                                   ></input>\n                                   <label>{tasks[length - 2].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column key={length-1} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => checkTask(tasks[length - 1].id)}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n       }\n       setTasksFormatted(taskRows);\n    }\n\n    if (loading){\n        return (\n            <div className=\"loading\">\n                <Loader/>\n            </div>\n        );\n    }\n\n    else {\n        return (\n            <div className=\"ddl\">\n                <h1 \n                style={{textAlign: \"center\", color: \"#181818\"}}>\n                    {`You Have ${tasks.length - 1} Active Tasks`}\n                </h1>\n                <br/>\n                <Grid columns={3} divided>\n                    {tasksFormatted}\n                </Grid>\n            </div>\n        );\n    }\n    \n}\n\nexport default DisplayTasks;\n","/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/components/InlineLoader.js",[],"/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/ethereum/web3.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":16,"column":7,"nodeType":"50","endLine":16,"endColumn":19,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":23,"column":8,"nodeType":"50","endLine":23,"endColumn":15,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createTaskList'. Either include it or remove the dependency array.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'createFormattedTaskList'. Either include it or remove the dependency array.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [createTaskList, resetTasks]",{"range":"62","text":"63"},"Update the dependencies array to be: [createFormattedTaskList, tasks]",{"range":"64","text":"65"},[517,529],"[createTaskList, resetTasks]",[674,681],"[createFormattedTaskList, tasks]"]