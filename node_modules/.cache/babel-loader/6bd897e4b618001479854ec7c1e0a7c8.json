{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayTasks = _ref => {\n  _s();\n\n  let {\n    count\n  } = _ref;\n  const [tasks, setTasks] = useState([{\n    id: 0\n  }]);\n  const [tasksFormatted, setTasksFormatted] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    createTaskList();\n  }, []);\n  useEffect(() => {\n    if (tasks[0].id === 1) {\n      createFormattedTaskList();\n      setLoading(false);\n    }\n  }, [tasks]);\n\n  const checkTask = async id => {\n    console.log('checktask');\n    const task = await todo.methods.tasks(id).call();\n    const isChecked = task.completed;\n\n    if (!isChecked) {\n      const accounts = await web3.eth.getAccounts();\n      await todo.methods.checkTask(id).send({\n        from: accounts[0]\n      });\n      document.getElementById(id).innerHTML = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this);\n    } else {\n      window.alert(\"You already completed this task\");\n    }\n  };\n\n  const createTaskList = async () => {\n    // const taskRows = [];\n    const initialTasks = [];\n    initialTasks.push({\n      id: 1\n    });\n    let i;\n\n    for (i = 1; i < count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      console.log(task.content);\n      console.log(task.id);\n      console.log(task.completed);\n\n      if (!task.completed) {\n        initialTasks.push(task);\n      }\n    }\n\n    console.log(initialTasks);\n    setTasks(initialTasks);\n  };\n\n  const createFormattedTaskList = () => {\n    const length = tasks.length;\n    const mod = (length - 1) % 3;\n    const taskRows = [];\n    let i;\n\n    for (i = 3; i < length; i += 3) {\n      console.log(tasks[1]);\n\n      let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i - 2].id,\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: \"auto\"\n              },\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 2].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 2].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i - 1].id,\n            style: {\n              width: \"100%\"\n            },\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 1].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 1].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)\n        }, i - 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i].id,\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)]\n      }, i / 3, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this);\n\n      taskRows.push(taskRow);\n    }\n\n    if (mod !== 0) {\n      if (mod === 1) {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => {\n                    console.log('i value');\n                    console.log(i - 2);\n                    checkTask(tasks[length - 1].id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 28\n            }, this)\n          }, length - 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 24\n          }, this)\n        }, i / 3, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      } else {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 2].id,\n                  onClick: () => checkTask(tasks[length - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 137,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 28\n            }, this)\n          }, length - 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => checkTask(tasks[length - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 28\n            }, this)\n          }, length - 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 24\n          }, this)]\n        }, i / 3, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      }\n    }\n\n    console.log('task row');\n    console.log(taskRows);\n    setTasksFormatted(taskRows);\n  };\n\n  console.log('tasks');\n  console.log(tasks);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }, this);\n  } else {\n    console.log('done loading');\n    console.log(tasksFormatted);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      columns: 3,\n      divided: true,\n      children: tasksFormatted\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(DisplayTasks, \"74Ebgexs+nHtOySSw83P4ryV3mY=\");\n\n_c = DisplayTasks;\nexport default DisplayTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","DisplayTasks","count","tasks","setTasks","id","tasksFormatted","setTasksFormatted","loading","setLoading","createTaskList","createFormattedTaskList","checkTask","console","log","task","methods","call","isChecked","completed","accounts","eth","getAccounts","send","from","document","getElementById","innerHTML","window","alert","initialTasks","push","i","content","length","mod","taskRows","taskRow","width","event","target","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\n\nconst DisplayTasks = ({count}) => {\n\n    const [tasks, setTasks] = useState([{id: 0}]);\n    const [tasksFormatted, setTasksFormatted] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect( () => {\n        setLoading(true);\n        createTaskList();\n    },[])\n\n    useEffect( () => {\n        if (tasks[0].id === 1){\n            createFormattedTaskList();\n            setLoading(false);\n        }\n    }, [tasks])\n\n    const checkTask = async(id) => {\n        console.log('checktask');\n        const task = await todo.methods.tasks(id).call();\n        const isChecked = task.completed;\n        if (!isChecked){\n            const accounts = await web3.eth.getAccounts();\n            await todo.methods.checkTask(id).send({from: accounts[0]});\n            document.getElementById(id).innerHTML = (\n                <h1>loading</h1>\n            );\n        }\n        else {\n            window.alert(\"You already completed this task\");\n        }\n    }\n\n    const createTaskList = async () => {\n        // const taskRows = [];\n        const initialTasks = [];\n        initialTasks.push({id: 1});\n        let i;\n        for (i = 1; i < count; i++){\n            const task = await todo.methods.tasks(i).call();\n            console.log(task.content);\n            console.log(task.id);\n            console.log(task.completed);\n            if (!task.completed){\n                initialTasks.push(task); \n            }         \n        }\n        console.log(initialTasks);\n        setTasks(initialTasks);\n    }\n\n    const createFormattedTaskList = () => {\n\n        const length = tasks.length;\n        const mod = (length - 1) % 3;\n        const taskRows = [];\n        let i;\n        for (i = 3; i < length; i += 3){\n            console.log(tasks[1]);\n            let taskRow = (\n                <Grid.Row key={i / 3}>\n                    <Grid.Column textAlign='center'>\n                        <div id={tasks[i-2].id} className=\"ui left floated compact segment\">\n                            <div style={{width: \"auto\"}} className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-2].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-2].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i-1} textAlign='center'>\n                        <div id={tasks[i-1].id} style={{width: \"100%\"}} className=\"ui left floated compact segment\">\n                            <div  className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-1].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-1].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i} textAlign='center'>\n                        <div id={tasks[i].id} className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n               )\n            taskRows.push(taskRow);\n       }\n       if (mod !== 0){\n           if (mod === 1){\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length - 1}textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => {\n                                    console.log('i value')\n                                    console.log(i-2);\n                                    checkTask(tasks[length - 1].id)}}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n           else {\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length-2} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 2].id}\n                                   onClick={() => checkTask(tasks[length - 2].id)}\n                                   ></input>\n                                   <label>{tasks[length - 2].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column key={length-1} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => checkTask(tasks[length - 1].id)}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n       }\n       console.log('task row');\n       console.log(taskRows);\n       setTasksFormatted(taskRows);\n    }\n\n    console.log('tasks')\n    console.log(tasks);\n    if (loading){\n        return <h1>loading</h1>\n    }\n\n    else {\n        console.log('done loading');\n        console.log(tasksFormatted);\n        return (\n            <Grid columns={3} divided>\n                {tasksFormatted}\n            </Grid>\n        )\n    }\n    \n}\n\nexport default DisplayTasks;\n"]},"metadata":{},"sourceType":"module"}