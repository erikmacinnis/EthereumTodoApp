{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport Loader from './InlineLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayTasks = _ref => {\n  _s();\n\n  let {\n    count,\n    setCompleted,\n    resetTasks\n  } = _ref;\n  const [tasks, setTasks] = useState([{\n    id: 0\n  }]);\n  const [tasksFormatted, setTasksFormatted] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n    createTaskList();\n  }, [resetTasks]);\n  useEffect(() => {\n    if (tasks[0].id === 1) {\n      createFormattedTaskList();\n      setLoading(false);\n    }\n  }, [tasks]); // useEffect( () => {\n  //     console.log('resetDisplay')\n  //     setLoading(true);\n  //     createTaskList();\n  // },[resetTasks])\n\n  const checkTask = async id => {\n    console.log('checktask');\n    const task = await todo.methods.tasks(id).call();\n    const isChecked = task.completed;\n\n    if (!isChecked) {\n      const accounts = await web3.eth.getAccounts();\n\n      try {\n        await todo.methods.checkTask(id).send({\n          from: accounts[0]\n        });\n      } catch (err) {// handle reject\n      }\n    } else {\n      window.alert(\"You already completed this task\");\n    }\n  };\n\n  const createTaskList = async () => {\n    // const taskRows = [];\n    const initialTasks = [];\n    const completedTasks = [];\n    initialTasks.push({\n      id: 1\n    });\n    const counter = parseInt(count) + 1;\n    let i;\n\n    for (i = 1; i < counter; i++) {\n      const task = await todo.methods.tasks(i).call();\n\n      if (!task.completed) {\n        initialTasks.push(task);\n      } else {\n        completedTasks.push({\n          key: task.id,\n          text: task.content,\n          value: task.content,\n          image: {\n            avatar: true,\n            src: '/images/checkmark.png'\n          }\n        });\n      }\n    }\n\n    setTasks(initialTasks);\n  };\n\n  const createFormattedTaskList = () => {\n    const length = tasks.length;\n    const mod = (length - 1) % 3;\n    const taskRows = [];\n    let i;\n\n    for (i = 3; i < length; i += 3) {\n      console.log(tasks[1]);\n\n      let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i - 2].id,\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: \"auto\"\n              },\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 2].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 2].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i - 1].id,\n            style: {\n              width: \"100%\"\n            },\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 1].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 1].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, i - 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          textAlign: \"center\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: tasks[i].id,\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i].id,\n                onClick: event => checkTask(event.target.name)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this)]\n      }, i / 3, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this);\n\n      taskRows.push(taskRow);\n    }\n\n    if (mod !== 0) {\n      if (mod === 1) {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => {\n                    console.log('i value');\n                    console.log(i - 2);\n                    checkTask(tasks[length - 1].id);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 141,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 28\n            }, this)\n          }, length - 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 24\n          }, this)\n        }, i / 3, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      } else {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 2].id,\n                  onClick: () => checkTask(tasks[length - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 155,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 28\n            }, this)\n          }, length - 2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => checkTask(tasks[length - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 28\n            }, this)\n          }, length - 1, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 24\n          }, this)]\n        }, i / 3, true, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      }\n    }\n\n    console.log('task row');\n    console.log(taskRows);\n    setTasksFormatted(taskRows);\n  };\n\n  console.log('tasks');\n  console.log(tasks);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ddl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: \"#181818\"\n        },\n        children: `You Have ${tasks.length - 1} Active Tasks`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        columns: 3,\n        divided: true,\n        children: tasksFormatted\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(DisplayTasks, \"74Ebgexs+nHtOySSw83P4ryV3mY=\");\n\n_c = DisplayTasks;\nexport default DisplayTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","Loader","DisplayTasks","count","setCompleted","resetTasks","tasks","setTasks","id","tasksFormatted","setTasksFormatted","loading","setLoading","createTaskList","createFormattedTaskList","checkTask","console","log","task","methods","call","isChecked","completed","accounts","eth","getAccounts","send","from","err","window","alert","initialTasks","completedTasks","push","counter","parseInt","i","key","text","content","value","image","avatar","src","length","mod","taskRows","taskRow","width","event","target","name","textAlign","color"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport Loader from './InlineLoader';\n\nconst DisplayTasks = ({count, setCompleted, resetTasks}) => {\n\n    const [tasks, setTasks] = useState([{id: 0}]);\n    const [tasksFormatted, setTasksFormatted] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect( () => {\n        setLoading(true);\n        createTaskList();\n    },[resetTasks])\n\n    useEffect( () => {\n        if (tasks[0].id === 1){\n            createFormattedTaskList();\n            setLoading(false);\n        }\n    }, [tasks])\n\n    // useEffect( () => {\n    //     console.log('resetDisplay')\n    //     setLoading(true);\n    //     createTaskList();\n    // },[resetTasks])\n\n    const checkTask = async(id) => {\n        console.log('checktask');\n        const task = await todo.methods.tasks(id).call();\n        const isChecked = task.completed;\n        if (!isChecked){\n            const accounts = await web3.eth.getAccounts();\n            try {\n                await todo.methods.checkTask(id).send({from: accounts[0]});\n\n            }catch(err) {\n                // handle reject\n            }\n        }\n        else {\n            window.alert(\"You already completed this task\");\n        }\n    }\n\n    const createTaskList = async () => {\n        // const taskRows = [];\n        const initialTasks = [];\n        const completedTasks = [];\n        initialTasks.push({id: 1});\n        const counter = parseInt(count) + 1;\n        let i;\n        for (i = 1; i < counter; i++){\n            const task = await todo.methods.tasks(i).call();\n\n            if (!task.completed){\n                initialTasks.push(task); \n            } \n            else {\n                completedTasks.push(\n                    {\n                        key: task.id,\n                        text: task.content,\n                        value: task.content,\n                        image: {avatar: true, src: '/images/checkmark.png'}\n                    }\n                );\n            }        \n        }\n        setTasks(initialTasks);\n    }\n\n    const createFormattedTaskList = () => {\n\n        const length = tasks.length;\n        const mod = (length - 1) % 3;\n        const taskRows = [];\n        let i;\n        for (i = 3; i < length; i += 3){\n            console.log(tasks[1]);\n            let taskRow = (\n                <Grid.Row key={i / 3}>\n                    <Grid.Column textAlign='center'>\n                        <div id={tasks[i-2].id} className=\"ui left floated compact segment\">\n                            <div style={{width: \"auto\"}} className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-2].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-2].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i-1} textAlign='center'>\n                        <div id={tasks[i-1].id} style={{width: \"100%\"}} className=\"ui left floated compact segment\">\n                            <div  className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-1].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i-1].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column key={i} textAlign='center'>\n                        <div id={tasks[i].id} className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i].id}\n                                onClick={(event) => checkTask(event.target.name)}\n                                ></input>\n                                <label>{tasks[i].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n               )\n            taskRows.push(taskRow);\n       }\n       if (mod !== 0){\n           if (mod === 1){\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length - 1}textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => {\n                                    console.log('i value')\n                                    console.log(i-2);\n                                    checkTask(tasks[length - 1].id)}}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n           else {\n                let taskRow = (\n                   <Grid.Row key={i / 3}>\n                       <Grid.Column key={length-2} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 2].id}\n                                   onClick={() => checkTask(tasks[length - 2].id)}\n                                   ></input>\n                                   <label>{tasks[length - 2].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column key={length-1} textAlign='center'>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => checkTask(tasks[length - 1].id)}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n       }\n       console.log('task row');\n       console.log(taskRows);\n       setTasksFormatted(taskRows);\n    }\n\n    console.log('tasks')\n    console.log(tasks);\n    if (loading){\n        return (\n            <div className=\"loading\">\n                <Loader/>\n            </div>\n        );\n    }\n\n    else {\n        return (\n            <div className=\"ddl\">\n                <h1 \n                style={{textAlign: \"center\", color: \"#181818\"}}>\n                    {`You Have ${tasks.length - 1} Active Tasks`}\n                </h1>\n                <br/>\n                <Grid columns={3} divided>\n                    {tasksFormatted}\n                </Grid>\n            </div>\n        );\n    }\n    \n}\n\nexport default DisplayTasks;\n"]},"metadata":{},"sourceType":"module"}