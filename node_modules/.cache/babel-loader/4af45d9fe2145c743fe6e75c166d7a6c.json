{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js\";\nimport React from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      errorMessage: '',\n      tasks: []\n    };\n  }\n\n  async componentDidMount() {\n    console.log('component started mounting');\n    const count = await todo.methods.count().call();\n\n    if (count > 0) {\n      this.createTasksList();\n    }\n\n    console.log('list is empty');\n  } // async componentDidUpdate() {\n  // }\n\n\n  async createTasksList() {\n    const count = await todo.methods.count().call();\n    const tasksList = [];\n\n    for (let i = 0; i <= count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      tasksList.push(task);\n    }\n\n    console.log(taskList[0]);\n  }\n\n  async createTask(content) {\n    const accounts = await web3.eth.getAccounts();\n\n    try {\n      await todo.methods.createTask(content).send();\n    } catch (err) {\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n  }\n\n  render() {\n    if (tasks.length == 0) {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"The list is empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Please create a Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => this.createTask(event.target.value),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Create a Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.text,\n              onChange: e => this.setState({\n                text: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"This is a list of tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), displayTask, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: event => this.createTask(event.target.value),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Create a Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.text,\n            onChange: e => this.setState({\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js"],"names":["React","todo","web3","App","Component","state","errorMessage","tasks","componentDidMount","console","log","count","methods","call","createTasksList","tasksList","i","task","push","taskList","createTask","content","accounts","eth","getAccounts","send","err","setState","message","render","length","event","target","value","text","e","displayTask"],"mappings":"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","sourcesContent":["import React from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\n\nclass App extends React.Component {\n\n    state = {errorMessage: '', tasks: []}\n\n    async componentDidMount() {\n        console.log('component started mounting')\n        const count = await todo.methods.count().call();\n        if (count > 0){\n            this.createTasksList();\n        }\n        console.log('list is empty');\n    }\n\n    // async componentDidUpdate() {\n\n    // }\n\n\n\n    async createTasksList() {\n        const count = await todo.methods.count().call();\n        const tasksList = [];\n        for (let i = 0; i <= count; i++) {\n            const task = await todo.methods.tasks(i).call();\n            tasksList.push(task);\n        }\n        console.log(taskList[0])\n    }\n\n    async createTask(content) {\n        const accounts = await web3.eth.getAccounts();\n        try {\n            await todo.methods.createTask(content).send()\n        }\n        catch (err) {\n            this.setState({errorMessage: err.message})\n        }\n    }\n\n    render() {\n        if (tasks.length == 0){\n            <div>\n                <h1>The list is empty.</h1>\n                <h2>Please create a Task</h2>\n                <form onSubmit={event => this.createTask(event.target.value)}>\n                    <div>\n                        <label>Create a Task</label>\n                        <input\n                        type=\"text\"\n                        value={this.state.text}\n                        onChange={e => this.setState({text: e.target.value })}\n                        />\n                    </div>\n                </form>\n            </div>\n        }\n        return (\n            <div>\n                <h1>This is a list of tasks</h1>\n                {displayTask}\n                <form onSubmit={event => this.createTask(event.target.value)}>\n                    <div>\n                        <label>Create a Task</label>\n                        <input\n                        type=\"text\"\n                        value={this.state.text}\n                        onChange={e => this.setState({text: e.target.value })}\n                        />\n                    </div>\n                </form>\n                    \n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}