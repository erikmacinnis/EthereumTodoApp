{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\";\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DisplayTasks = _ref => {\n  let {\n    count\n  } = _ref;\n\n  const createTaskList = async () => {\n    const taskRows = [];\n    const tasks = [];\n    let i;\n\n    for (i = 1; i <= count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      tasks.push(task);\n    }\n\n    for (i = 1; i <= count; i++) {\n      if (i % 3 == 0) {\n        const taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 2].id,\n                  onClick: () => checkTask(tasks[i - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 27,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 32,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 26,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 1].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 39,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 44,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 51,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 21\n        }, this);\n\n        taskRows.push(taskRow);\n        console.log(taskRows);\n      }\n    }\n\n    const mod = i % 3;\n\n    if (mod != 3) {\n      if (mod == 1) {\n        const taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this);\n\n        taskRows.push(taskRow);\n      } else {\n        const taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 1].id,\n                  onClick: () => checkTask(tasks[i - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this);\n\n        taskRows.push(taskRow);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: taskRows.map(task => {\n        return {\n          task\n        };\n      })\n    }, void 0, false);\n  };\n\n  const checkTask = async id => {\n    const accounts = await web3.eth.getAccounts();\n    await todo.methods.checkTask(id).send({\n      from: accounts[0]\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    column: 3,\n    children: createTaskList()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 9\n  }, this);\n};\n\n_c = DisplayTasks;\nexport default DisplayTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","DisplayTasks","count","createTaskList","taskRows","tasks","i","task","methods","call","push","taskRow","id","checkTask","content","console","log","mod","map","accounts","eth","getAccounts","send","from"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\n\nconst DisplayTasks = ({count}) => {\n\n\n    const createTaskList = async() => {\n        const taskRows = [];\n        const tasks = [];\n\n        let i;\n        for (i = 1; i <= count; i++){\n            const task = await todo.methods.tasks(i).call();\n            tasks.push(task);\n        }\n\n        for (i = 1; i <= count; i++){\n\n            if (i % 3 == 0) {\n                const taskRow = (\n                    <Grid.Row>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i-2].id}\n                                    onClick={() => checkTask(tasks[i-2].id)}\n                                    ></input>\n                                    <label>{tasks[i-2].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i-1].id}\n                                    onClick={() => checkTask(tasks[i].id)}\n                                    ></input>\n                                    <label>{tasks[i-1].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i].id}\n                                    onClick={() => checkTask(tasks[i].id)}\n                                    ></input>\n                                    <label>{tasks[i].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                )\n                taskRows.push(taskRow);\n                console.log(taskRows);\n            }\n        }\n        const mod = i % 3;\n        if (mod != 3){\n            if (mod == 1){\n                const taskRow = (\n                    <Grid.Row>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i].id}\n                                    onClick={() => checkTask(tasks[i].id)}\n                                    ></input>\n                                    <label>{tasks[i].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                )\n                taskRows.push(taskRow);\n            }\n            else {\n                const taskRow = (\n                    <Grid.Row>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i-1].id}\n                                    onClick={() => checkTask(tasks[i-1].id)}\n                                    ></input>\n                                    <label>{tasks[i-1].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={tasks[i].id}\n                                    onClick={() => checkTask(tasks[i].id)}\n                                    ></input>\n                                    <label>{tasks[i].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                )\n                taskRows.push(taskRow);\n            }\n        }\n        return (\n            <>\n            {\n                taskRows.map((task) => {\n                    return (\n                        {task}\n                    )\n                })\n            }\n            </>\n        )\n    }\n\n    const checkTask = async(id) => {\n        const accounts = await web3.eth.getAccounts();\n        await todo.methods.checkTask(id).send({from: accounts[0]});\n    }\n\n    return (\n        <Grid column={3}>\n            {createTaskList()}\n        </Grid>\n    )\n}\n\nexport default DisplayTasks;"]},"metadata":{},"sourceType":"module"}