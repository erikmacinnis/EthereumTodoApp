{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\nimport DisplayTasks from './components/DisplayTasks';\nimport CreateTask from './components/CreateTask.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [errMessage, setErrMessage] = useState([]);\n  const [count, setCount] = useState(async () => {\n    await todo.methods.count().call();\n  });\n  useEffect(() => {\n    console.log(count);\n  }, [count]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ui container\",\n    children: [/*#__PURE__*/_jsxDEV(DisplayTasks, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CreateTask, {\n      setCount: setCount,\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}; // class App extends React.Component {\n// state = {errorMessage: '', tasks: [], count: 0}\n// async componentDidMount() {\n//     this.createTask(\"first task\");\n//     console.log('component started mounting')\n//     const count = await todo.methods.count().call();\n//     console.log(count);\n//     this.setState(count);\n//     if (count > 0){\n//         this.createTasksList();\n//     }\n//     console.log('list is empty');\n// }\n// // async componentDidUpdate() {\n// // }\n// async createTasksList() {\n//     const count = await todo.methods.count().call();\n//     const tasksList = [];\n//     for (let i = 0; i <= count; i++) {\n//         const task = await todo.methods.tasks(i).call();\n//         tasksList.push(task);\n//     }\n//     const displayList = tasksList.map((task) => {\n//         return (\n//             <div>\n//                 {task}\n//             </div>\n//         );  \n//     })\n// }\n// async createTask(content) {\n//     const accounts = await web3.eth.getAccounts();\n//     try {\n//         await todo.methods.createTask(content).send()\n//     }\n//     catch (err) {\n//         this.setState({errorMessage: err.message})\n//     }\n// }\n// render() {\n//     return(\n//         <div>\n//             <h1>The list is empty.</h1>\n//             <h2>Please create a Task</h2>\n//             <form onSubmit={event => this.createTask(event.target.value)}>\n//                 <div>\n//                     <label>Create a Task</label>\n//                     <input\n//                     type=\"text\"\n//                     value={this.state.text}\n//                     onChange={e => this.setState({text: e.target.value })}\n//                     />\n//                 </div>\n//             </form>\n//         </div>\n//     );\n//     }\n//     return (\n//         <div>\n//             <h1>This is a list of tasks</h1>\n//             {/* {displayTask} */}\n//             <form onSubmit={event => this.createTask(event.target.value)}>\n//                 <div>\n//                     <label>Create a Task</label>\n//                     <input\n//                     type=\"text\"\n//                     value={this.state.text}\n//                     onChange={e => this.setState({text: e.target.value })}\n//                     />\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// }\n// }\n\n\n_s(App, \"ScAHXFxtqVCE+jFa4oNeBNfMsow=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js"],"names":["React","useEffect","useState","todo","web3","DisplayTasks","CreateTask","App","loading","setLoading","errMessage","setErrMessage","count","setCount","methods","call","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,UAAP,MAAuB,4BAAvB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAEd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,YAAW;AAC1C,UAAMC,IAAI,CAACW,OAAL,CAAaF,KAAb,GAAqBG,IAArB,EAAN;AACH,GAFiC,CAAlC;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEC,QAAtB;AAAgC,MAAA,KAAK,EAAED;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAlBD,C,CAoBA;AAII;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACJ;;;GAzGML,G;;KAAAA,G;AA2GN,eAAeA,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\nimport DisplayTasks from './components/DisplayTasks';\nimport CreateTask from './components/CreateTask.js';\n\nconst App = () => {\n\n    const [loading, setLoading] = useState(false);\n    const [errMessage, setErrMessage] = useState([]);\n    const [count, setCount] = useState(async() => {\n        await todo.methods.count().call();\n    })\n\n    useEffect(() => {\n        console.log(count);\n    }, [count])\n\n    return (\n        <div className=\"ui container\">\n            <DisplayTasks/>\n            <CreateTask setCount={setCount} count={count}/>\n        </div>\n    )\n}\n\n// class App extends React.Component {\n\n\n\n    // state = {errorMessage: '', tasks: [], count: 0}\n\n    // async componentDidMount() {\n    //     this.createTask(\"first task\");\n        \n    //     console.log('component started mounting')\n    //     const count = await todo.methods.count().call();\n    //     console.log(count);\n    //     this.setState(count);\n    //     if (count > 0){\n    //         this.createTasksList();\n    //     }\n    //     console.log('list is empty');\n    // }\n\n    // // async componentDidUpdate() {\n\n    // // }\n\n    // async createTasksList() {\n    //     const count = await todo.methods.count().call();\n    //     const tasksList = [];\n    //     for (let i = 0; i <= count; i++) {\n    //         const task = await todo.methods.tasks(i).call();\n    //         tasksList.push(task);\n    //     }\n    //     const displayList = tasksList.map((task) => {\n    //         return (\n    //             <div>\n    //                 {task}\n    //             </div>\n    //         );  \n    //     })\n    // }\n\n    // async createTask(content) {\n    //     const accounts = await web3.eth.getAccounts();\n    //     try {\n    //         await todo.methods.createTask(content).send()\n    //     }\n    //     catch (err) {\n    //         this.setState({errorMessage: err.message})\n    //     }\n    // }\n\n    // render() {\n    //     return(\n    //         <div>\n    //             <h1>The list is empty.</h1>\n    //             <h2>Please create a Task</h2>\n    //             <form onSubmit={event => this.createTask(event.target.value)}>\n    //                 <div>\n    //                     <label>Create a Task</label>\n    //                     <input\n    //                     type=\"text\"\n    //                     value={this.state.text}\n    //                     onChange={e => this.setState({text: e.target.value })}\n    //                     />\n    //                 </div>\n    //             </form>\n    //         </div>\n    //     );\n    //     }\n    //     return (\n    //         <div>\n    //             <h1>This is a list of tasks</h1>\n    //             {/* {displayTask} */}\n    //             <form onSubmit={event => this.createTask(event.target.value)}>\n    //                 <div>\n    //                     <label>Create a Task</label>\n    //                     <input\n    //                     type=\"text\"\n    //                     value={this.state.text}\n    //                     onChange={e => this.setState({text: e.target.value })}\n    //                     />\n    //                 </div>\n    //             </form>\n                    \n    //         </div>\n    //     );\n    // }\n// }\n\nexport default App;"]},"metadata":{},"sourceType":"module"}