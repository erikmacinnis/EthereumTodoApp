{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js\";\nimport React from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      errorMessage: '',\n      tasks: [],\n      count: 0\n    };\n  }\n\n  async componentDidMount() {\n    this.createTask(\"first task\");\n    console.log('component started mounting');\n    const count = await todo.methods.count().call();\n    console.log(count);\n    this.setState(count);\n\n    if (count > 0) {\n      this.createTasksList();\n    }\n\n    console.log('list is empty');\n  } // async componentDidUpdate() {\n  // }\n\n\n  async createTasksList() {\n    const count = await todo.methods.count().call();\n    const tasksList = [];\n\n    for (let i = 0; i <= count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      tasksList.push(task);\n    }\n\n    const displayList = tasksList.map(task => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: task\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n  async createTask(content) {\n    const accounts = await web3.eth.getAccounts();\n\n    try {\n      await todo.methods.createTask(content).send();\n    } catch (err) {\n      this.setState({\n        errorMessage: err.message\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The list is empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please create a Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: event => this.createTask(event.target.value),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Create a Task\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: this.state.text,\n            onChange: e => this.setState({\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  } //     return (\n  //         <div>\n  //             <h1>This is a list of tasks</h1>\n  //             {/* {displayTask} */}\n  //             <form onSubmit={event => this.createTask(event.target.value)}>\n  //                 <div>\n  //                     <label>Create a Task</label>\n  //                     <input\n  //                     type=\"text\"\n  //                     value={this.state.text}\n  //                     onChange={e => this.setState({text: e.target.value })}\n  //                     />\n  //                 </div>\n  //             </form>\n  //         </div>\n  //     );\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/App.js"],"names":["React","todo","web3","App","Component","state","errorMessage","tasks","count","componentDidMount","createTask","console","log","methods","call","setState","createTasksList","tasksList","i","task","push","displayList","map","content","accounts","eth","getAccounts","send","err","message","render","event","target","value","text","e"],"mappings":"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","sourcesContent":["import React from 'react';\nimport todo from './ethereum/todo.js';\nimport web3 from './ethereum/web3.js';\n\nclass App extends React.Component {\n\n    state = {errorMessage: '', tasks: [], count: 0}\n\n    async componentDidMount() {\n        this.createTask(\"first task\");\n        \n        console.log('component started mounting')\n        const count = await todo.methods.count().call();\n        console.log(count);\n        this.setState(count);\n        if (count > 0){\n            this.createTasksList();\n        }\n        console.log('list is empty');\n    }\n\n    // async componentDidUpdate() {\n\n    // }\n\n    async createTasksList() {\n        const count = await todo.methods.count().call();\n        const tasksList = [];\n        for (let i = 0; i <= count; i++) {\n            const task = await todo.methods.tasks(i).call();\n            tasksList.push(task);\n        }\n        const displayList = tasksList.map((task) => {\n            return (\n                <div>\n                    {task}\n                </div>\n            );  \n        })\n    }\n\n    async createTask(content) {\n        const accounts = await web3.eth.getAccounts();\n        try {\n            await todo.methods.createTask(content).send()\n        }\n        catch (err) {\n            this.setState({errorMessage: err.message})\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <h1>The list is empty.</h1>\n                <h2>Please create a Task</h2>\n                <form onSubmit={event => this.createTask(event.target.value)}>\n                    <div>\n                        <label>Create a Task</label>\n                        <input\n                        type=\"text\"\n                        value={this.state.text}\n                        onChange={e => this.setState({text: e.target.value })}\n                        />\n                    </div>\n                </form>\n            </div>\n        );\n        }\n    //     return (\n    //         <div>\n    //             <h1>This is a list of tasks</h1>\n    //             {/* {displayTask} */}\n    //             <form onSubmit={event => this.createTask(event.target.value)}>\n    //                 <div>\n    //                     <label>Create a Task</label>\n    //                     <input\n    //                     type=\"text\"\n    //                     value={this.state.text}\n    //                     onChange={e => this.setState({text: e.target.value })}\n    //                     />\n    //                 </div>\n    //             </form>\n                    \n    //         </div>\n    //     );\n    // }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}