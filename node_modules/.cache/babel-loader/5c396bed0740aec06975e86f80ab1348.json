{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayTasks = _ref => {\n  _s();\n\n  let {\n    count\n  } = _ref;\n  const [tasks, setTasks] = useState([{\n    id: 0\n  }]);\n  useEffect(async () => {\n    await createTaskList();\n    await createFormattedTaskList();\n  }, []);\n\n  const checkTask = async id => {\n    const accounts = await web3.eth.getAccounts();\n    await todo.methods.checkTask(id).send({\n      from: accounts[0]\n    });\n  };\n\n  const createTaskList = async () => {\n    // const taskRows = [];\n    const initialTasks = [];\n    console.log('starting desplay task');\n    let i;\n\n    for (i = 1; i < count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      console.log(task);\n      initialTasks.push(task);\n    }\n\n    console.log(initialTasks);\n    setTasks(initialTasks);\n  };\n\n  const createFormattedTaskList = () => {\n    console.log('starting formattedlist');\n    const length = tasks.length;\n    const mod = (length - 1) % 3;\n    const taskRows = [];\n    let i;\n\n    for (i = 3; i < length; i += 3) {\n      let taskRow;\n\n      if (i % 3 === 0) {\n        taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 2].id,\n                  onClick: () => checkTask(tasks[i - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 55,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 1].id,\n                  onClick: () => checkTask(tasks[i - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 20\n        }, this);\n      }\n\n      console.log(taskRow);\n      taskRows.push(taskRow);\n    }\n\n    if (mod != 0) {\n      if (mod == 1) {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      } else {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i - 1].id,\n                  onClick: () => checkTask(tasks[i - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[i].id,\n                  onClick: () => checkTask(tasks[i].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[i].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [tasks.map((task, index) => {\n      console.log(task);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui left floated compact segment\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui toggle checked checkbox\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: task.id,\n              onClick: () => checkTask(task.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: task.content\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }, this);\n    }), \"hello this actually works\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayTasks, \"RS+X5SUxiIthRArTgp7IehHcxeg=\");\n\n_c = DisplayTasks;\nexport default DisplayTasks;\n/* {initalTasks.map((task, index) => {\n                    <React.Fragment key={index}>\n                        <h1>{task.id}</h1>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input \n                                type=\"checkbox\" \n                                name={task.id}\n                                onClick={() => checkTask(task.id)}\n                                ></input>\n                                <label>{task.content}</label>\n                            </div>\n                        </div>\n                    </ React.Fragment>\n                })} */\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","DisplayTasks","count","tasks","setTasks","id","createTaskList","createFormattedTaskList","checkTask","accounts","eth","getAccounts","methods","send","from","initialTasks","console","log","i","task","call","push","length","mod","taskRows","taskRow","content","map","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAASC,IAAT,QAAqB,mBAArB;;;AAEA,MAAMC,YAAY,GAAG,QAAa;AAAA;;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAE9B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,CAAC;AAACQ,IAAAA,EAAE,EAAE;AAAL,GAAD,CAAD,CAAlC;AAEAT,EAAAA,SAAS,CAAC,YAAW;AACjB,UAAMU,cAAc,EAApB;AACA,UAAMC,uBAAuB,EAA7B;AACH,GAHQ,EAGP,EAHO,CAAT;;AAKA,QAAMC,SAAS,GAAG,MAAMH,EAAN,IAAa;AAC3B,UAAMI,QAAQ,GAAG,MAAMV,IAAI,CAACW,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMb,IAAI,CAACc,OAAL,CAAaJ,SAAb,CAAuBH,EAAvB,EAA2BQ,IAA3B,CAAgC;AAACC,MAAAA,IAAI,EAAEL,QAAQ,CAAC,CAAD;AAAf,KAAhC,CAAN;AACH,GAHD;;AAKA,QAAMH,cAAc,GAAG,YAAY;AAC/B;AACA,UAAMS,YAAY,GAAG,EAArB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,QAAIC,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGhB,KAAhB,EAAuBgB,CAAC,EAAxB,EAA2B;AACvB,YAAMC,IAAI,GAAG,MAAMrB,IAAI,CAACc,OAAL,CAAaT,KAAb,CAAmBe,CAAnB,EAAsBE,IAAtB,EAAnB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACAJ,MAAAA,YAAY,CAACM,IAAb,CAAkBF,IAAlB;AACH;;AACDH,IAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACAX,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACH,GAZD;;AAcA,QAAMR,uBAAuB,GAAG,MAAM;AAClCS,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEA,UAAMK,MAAM,GAAGnB,KAAK,CAACmB,MAArB;AACA,UAAMC,GAAG,GAAG,CAACD,MAAM,GAAG,CAAV,IAAe,CAA3B;AACA,UAAME,QAAQ,GAAG,EAAjB;AACA,QAAIN,CAAJ;;AACA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,MAAhB,EAAwBJ,CAAC,IAAI,CAA7B,EAA+B;AAE3B,UAAIO,OAAJ;;AACA,UAAIP,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACbO,QAAAA,OAAO,gBACJ,QAAC,IAAD,CAAM,GAAN;AAAA,kCACI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEtB,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAFjB;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAAZ;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWQ;AAAnB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAaI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEvB,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAFjB;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAAZ;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWQ;AAAnB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAbJ,eAyBI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEvB,KAAK,CAACe,CAAD,CAAL,CAASb,EAFf;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAD,CAAL,CAASb,EAAV;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAD,CAAL,CAASQ;AAAjB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH;AAwCJ;;AACDV,MAAAA,OAAO,CAACC,GAAR,CAAYQ,OAAZ;AACAD,MAAAA,QAAQ,CAACH,IAAT,CAAcI,OAAd;AACH;;AAED,QAAIF,GAAG,IAAI,CAAX,EAAa;AACT,UAAIA,GAAG,IAAI,CAAX,EAAa;AACR,YAAIE,OAAO,gBACR,QAAC,IAAD,CAAM,GAAN;AAAA,iCACI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEtB,KAAK,CAACe,CAAD,CAAL,CAASb,EAFf;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAD,CAAL,CAASb,EAAV;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAD,CAAL,CAASQ;AAAjB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADH;;AAgBDF,QAAAA,QAAQ,CAACH,IAAT,CAAcI,OAAd;AACH,OAlBD,MAmBK;AACA,YAAIA,OAAO,gBACR,QAAC,IAAD,CAAM,GAAN;AAAA,kCACI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEtB,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAFjB;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWb,EAAZ;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAC,GAAC,CAAH,CAAL,CAAWQ;AAAnB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAaI,QAAC,IAAD,CAAM,MAAN;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,iCAAf;AAAA,qCACI;AAAK,gBAAA,SAAS,EAAC,4BAAf;AAAA,wCACI;AACA,kBAAA,IAAI,EAAC,UADL;AAEA,kBAAA,IAAI,EAAEvB,KAAK,CAACe,CAAD,CAAL,CAASb,EAFf;AAGA,kBAAA,OAAO,EAAE,MAAMG,SAAS,CAACL,KAAK,CAACe,CAAD,CAAL,CAASb,EAAV;AAHxB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAMI;AAAA,4BAAQF,KAAK,CAACe,CAAD,CAAL,CAASQ;AAAjB;AAAA;AAAA;AAAA;AAAA,wBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH;;AA4BDF,QAAAA,QAAQ,CAACH,IAAT,CAAcI,OAAd;AACH;AACJ;AACH,GA5GD;;AA8GA,sBACI;AAAA,eACKtB,KAAK,CAACwB,GAAN,CAAU,CAACR,IAAD,EAAOS,KAAP,KAAiB;AACxBZ,MAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACA,0BACI;AAAiB,QAAA,SAAS,EAAC,cAA3B;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,4BAAf;AAAA,oCACI;AACA,cAAA,IAAI,EAAC,UADL;AAEA,cAAA,IAAI,EAAEA,IAAI,CAACd,EAFX;AAGA,cAAA,OAAO,EAAE,MAAMG,SAAS,CAACW,IAAI,CAACd,EAAN;AAHxB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI;AAAA,wBAAQc,IAAI,CAACO;AAAb;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUE,KAAV;AAAA;AAAA;AAAA;AAAA,cADJ;AAcC,KAhBJ,CADL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsBH,CAhKD;;GAAM3B,Y;;KAAAA,Y;AAkKN,eAAeA,YAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\n\nconst DisplayTasks = ({count}) => {\n\n    const [tasks, setTasks] = useState([{id: 0}]);\n\n    useEffect(async() => {\n        await createTaskList();\n        await createFormattedTaskList();\n    },[])\n\n    const checkTask = async(id) => {\n        const accounts = await web3.eth.getAccounts();\n        await todo.methods.checkTask(id).send({from: accounts[0]});\n    }\n\n    const createTaskList = async () => {\n        // const taskRows = [];\n        const initialTasks = [];\n        console.log('starting desplay task')\n        let i;\n        for (i = 1; i < count; i++){\n            const task = await todo.methods.tasks(i).call();\n            console.log(task);\n            initialTasks.push(task);          \n        }\n        console.log(initialTasks);\n        setTasks(initialTasks);\n    }\n\n    const createFormattedTaskList = () => {\n        console.log('starting formattedlist')\n\n        const length = tasks.length;\n        const mod = (length - 1) % 3;\n        const taskRows = [];\n        let i;\n        for (i = 3; i < length; i += 3){\n            \n            let taskRow;\n            if (i % 3 === 0) {\n                taskRow = (\n                   <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i-2].id}\n                                   onClick={() => checkTask(tasks[i-2].id)}\n                                   ></input>\n                                   <label>{tasks[i-2].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i-1].id}\n                                   onClick={() => checkTask(tasks[i-1].id)}\n                                   ></input>\n                                   <label>{tasks[i-1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i].id}\n                                   onClick={() => checkTask(tasks[i].id)}\n                                   ></input>\n                                   <label>{tasks[i].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n           }\n           console.log(taskRow);\n           taskRows.push(taskRow);\n       }\n\n       if (mod != 0){\n           if (mod == 1){\n                let taskRow = (\n                   <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i].id}\n                                   onClick={() => checkTask(tasks[i].id)}\n                                   ></input>\n                                   <label>{tasks[i].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n           else {\n                let taskRow = (\n                   <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i-1].id}\n                                   onClick={() => checkTask(tasks[i-1].id)}\n                                   ></input>\n                                   <label>{tasks[i-1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[i].id}\n                                   onClick={() => checkTask(tasks[i].id)}\n                                   ></input>\n                                   <label>{tasks[i].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n       }\n    }\n\n    return (\n        <div>\n            {tasks.map((task, index) => {\n                console.log(task);\n                return (\n                    <div key={index} className=\"ui container\">\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input \n                                type=\"checkbox\" \n                                name={task.id}\n                                onClick={() => checkTask(task.id)}\n                                ></input>\n                                <label>{task.content}</label>\n                            </div>\n                        </div>\n                    </ div>\n                );\n                })}\n            hello this actually works\n        </div>\n    )\n}\n\nexport default DisplayTasks;\n\n/* {initalTasks.map((task, index) => {\n                    <React.Fragment key={index}>\n                        <h1>{task.id}</h1>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input \n                                type=\"checkbox\" \n                                name={task.id}\n                                onClick={() => checkTask(task.id)}\n                                ></input>\n                                <label>{task.content}</label>\n                            </div>\n                        </div>\n                    </ React.Fragment>\n                })} */"]},"metadata":{},"sourceType":"module"}