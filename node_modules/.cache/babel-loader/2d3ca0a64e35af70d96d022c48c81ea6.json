{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayTasks = _ref => {\n  _s();\n\n  let {\n    count\n  } = _ref;\n  const [tasks, setTasks] = useState([{\n    id: 0\n  }]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    createTaskList();\n  }, []);\n  useEffect(() => {\n    if (tasks[0].id === 1) {\n      createFormattedTaskList();\n      setLoading(false);\n    }\n  }, [tasks]);\n\n  const checkTask = async id => {\n    const accounts = await web3.eth.getAccounts();\n    await todo.methods.checkTask(id).send({\n      from: accounts[0]\n    });\n  };\n\n  const createTaskList = async () => {\n    // const taskRows = [];\n    const initialTasks = [];\n    initialTasks.push({\n      id: 1\n    });\n    let i;\n\n    for (i = 1; i < count; i++) {\n      const task = await todo.methods.tasks(i).call();\n      initialTasks.push(task);\n    }\n\n    setTasks(initialTasks);\n  };\n\n  const createFormattedTaskList = () => {\n    const length = tasks.length;\n    const mod = (length - 1) % 3;\n    const taskRows = [];\n    let i;\n\n    for (i = 3; i < length; i += 3) {\n      let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 2].id,\n                onClick: () => checkTask(tasks[i - 2].id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 2].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i - 1].id,\n                onClick: () => checkTask(tasks[i - 1].id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i - 1].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: tasks[i].id,\n                onClick: () => checkTask(tasks[i].id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: tasks[i].content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this);\n\n      taskRows.push(taskRow);\n    }\n\n    if (mod !== 0) {\n      if (mod === 1) {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => checkTask(tasks[length - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      } else {\n        let taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 2].id,\n                  onClick: () => checkTask(tasks[length - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 24\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: tasks[length - 1].id,\n                  onClick: () => checkTask(tasks[length - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 36\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: tasks[length - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 36\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 32\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 28\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 24\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 20\n        }, this);\n\n        taskRows.push(taskRow);\n      }\n    }\n\n    console.log('task row');\n    console.log(taskRows);\n    setTasks(taskRows);\n  }; // const renderList = () => {\n  //     for ()\n  // }\n\n\n  console.log('tasks');\n  console.log(tasks);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 16\n    }, this);\n  } else {\n    console.log(tasks);\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      columns: 3,\n      divided: true,\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: \"First\",\n                onClick: () => checkTask(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui left floated compact segment\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui toggle checked checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: \"First\",\n                onClick: () => checkTask(1)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 36\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Label\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 36\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 32\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 28\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(DisplayTasks, \"tyR7uhh6DKXaqnLyMU39hw63Luc=\");\n\n_c = DisplayTasks;\nexport default DisplayTasks;\n/* {initalTasks.map((task, index) => {\n                    <React.Fragment key={index}>\n                        <h1>{task.id}</h1>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input \n                                type=\"checkbox\" \n                                name={task.id}\n                                onClick={() => checkTask(task.id)}\n                                ></input>\n                                <label>{task.content}</label>\n                            </div>\n                        </div>\n                    </ React.Fragment>\n                })} */\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayTasks\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","DisplayTasks","count","tasks","setTasks","id","loading","setLoading","createTaskList","createFormattedTaskList","checkTask","accounts","eth","getAccounts","methods","send","from","initialTasks","push","i","task","call","length","mod","taskRows","taskRow","content","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\n\nconst DisplayTasks = ({count}) => {\n\n    const [tasks, setTasks] = useState([{id: 0}]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect( () => {\n        setLoading(true);\n        createTaskList();\n    },[])\n\n    useEffect( () => {\n        if (tasks[0].id === 1){\n            createFormattedTaskList();\n            setLoading(false);\n        }\n    }, [tasks])\n\n    const checkTask = async(id) => {\n        const accounts = await web3.eth.getAccounts();\n        await todo.methods.checkTask(id).send({from: accounts[0]});\n    }\n\n    const createTaskList = async () => {\n        // const taskRows = [];\n        const initialTasks = [];\n        initialTasks.push({id: 1});\n        let i;\n        for (i = 1; i < count; i++){\n            const task = await todo.methods.tasks(i).call();\n            initialTasks.push(task);          \n        }\n        setTasks(initialTasks);\n    }\n\n    const createFormattedTaskList = () => {\n\n        const length = tasks.length;\n        const mod = (length - 1) % 3;\n        const taskRows = [];\n        let i;\n        for (i = 3; i < length; i += 3){\n            let taskRow = (\n                <Grid.Row>\n                    <Grid.Column>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-2].id}\n                                onClick={() => checkTask(tasks[i-2].id)}\n                                ></input>\n                                <label>{tasks[i-2].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i-1].id}\n                                onClick={() => checkTask(tasks[i-1].id)}\n                                ></input>\n                                <label>{tasks[i-1].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                    <Grid.Column>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input\n                                type=\"checkbox\"\n                                name={tasks[i].id}\n                                onClick={() => checkTask(tasks[i].id)}\n                                ></input>\n                                <label>{tasks[i].content}</label>\n                            </div>\n                        </div>\n                    </Grid.Column>\n                </Grid.Row>\n               )\n            taskRows.push(taskRow);\n       }\n       if (mod !== 0){\n           if (mod === 1){\n                let taskRow = (\n                   <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => checkTask(tasks[length - 1].id)}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n           else {\n                let taskRow = (\n                   <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 2].id}\n                                   onClick={() => checkTask(tasks[length - 2].id)}\n                                   ></input>\n                                   <label>{tasks[length - 2].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name={tasks[length - 1].id}\n                                   onClick={() => checkTask(tasks[length - 1].id)}\n                                   ></input>\n                                   <label>{tasks[length - 1].content}</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n               )\n               taskRows.push(taskRow);\n           }\n       }\n       console.log('task row');\n       console.log(taskRows);\n       setTasks(taskRows);\n    }\n\n    // const renderList = () => {\n    //     for ()\n    // }\n\n    console.log('tasks')\n    console.log(tasks);\n    if (loading){\n        return <h1>loading</h1>\n    }\n\n    else {\n        console.log(tasks);\n        return (\n            <Grid columns={3} divided>\n                <Grid.Row>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name=\"First\"\n                                   onClick={() => checkTask(1)}\n                                   ></input>\n                                   <label>Label</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                       <Grid.Column>\n                           <div className=\"ui left floated compact segment\">\n                               <div className=\"ui toggle checked checkbox\">\n                                   <input\n                                   type=\"checkbox\"\n                                   name=\"First\"\n                                   onClick={() => checkTask(1)}\n                                   ></input>\n                                   <label>Label</label>\n                               </div>\n                           </div>\n                       </Grid.Column>\n                   </Grid.Row>\n            </Grid>\n        )\n    }\n    \n}\n\nexport default DisplayTasks;\n\n/* {initalTasks.map((task, index) => {\n                    <React.Fragment key={index}>\n                        <h1>{task.id}</h1>\n                        <div className=\"ui left floated compact segment\">\n                            <div className=\"ui toggle checked checkbox\">\n                                <input \n                                type=\"checkbox\" \n                                name={task.id}\n                                onClick={() => checkTask(task.id)}\n                                ></input>\n                                <label>{task.content}</label>\n                            </div>\n                        </div>\n                    </ React.Fragment>\n                })} */"]},"metadata":{},"sourceType":"module"}