{"ast":null,"code":"import Web3 from \"web3\";\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n\n  async function runNetwork() {\n    const chainId = 4;\n    console.log(window.ethereum.networkVersion);\n\n    if (window.ethereum.networkVersion !== chainId) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: \"0x\" + chainId.toString(16)\n          }]\n        });\n      } catch (err) {\n        if (err.code === 4902) {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [{\n              chainName: 'Rinkeby Test Network',\n              chainId: \"0x\" + chainId.toString(16),\n              nativeCurrency: {\n                name: 'RinkebyETH',\n                decimals: 18,\n                symbol: 'RinkebyETH'\n              },\n              rpcUrls: ['https://rinkeby.infura.io/v3/']\n            }]\n          }).catch(error => {\n            console.log(error);\n          });\n        }\n      }\n    }\n  }\n\n  runNetwork();\n  web3 = new Web3(window.ethereum);\n} else {\n  const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/e74aebcb315d408089b16cb32f4e5f69\");\n  web3 = new Web3(provider);\n}\n\nexport default web3; //   // A Web3Provider wraps a standard Web3 provider, which is\n// // what MetaMask injects as window.ethereum into each page\n// const provider = new ethers.providers.Web3Provider(window.ethereum)\n// // MetaMask requires requesting permission to connect users accounts\n// await provider.send(\"eth_requestAccounts\", []);\n// // The MetaMask plugin also allows signing transactions to\n// // send ether and pay to change state within the blockchain.\n// // For this, you need the account signer...\n// const signer = provider.getSigner()","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/EthProjects/EthereumTodoApp/src/ethereum/web3.js"],"names":["Web3","web3","window","ethereum","request","method","runNetwork","chainId","console","log","networkVersion","params","toString","err","code","chainName","nativeCurrency","name","decimals","symbol","rpcUrls","catch","error","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ;;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;AAErED,EAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB;;AAEA,iBAAeC,UAAf,GAA4B;AAC5B,UAAMC,OAAO,GAAG,CAAhB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,QAAP,CAAgBO,cAA5B;;AACA,QAAIR,MAAM,CAACC,QAAP,CAAgBO,cAAhB,KAAmCH,OAAvC,EAAgD;AAC5C,UAAI;AACA,cAAML,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,UAAAA,MAAM,EAAE,4BAAT;AAAuCM,UAAAA,MAAM,EAAE,CAAC;AAACJ,YAAAA,OAAO,EAAE,OAAOA,OAAO,CAACK,QAAR,CAAiB,EAAjB;AAAjB,WAAD;AAA/C,SAAxB,CAAN;AACH,OAFD,CAGA,OAAOC,GAAP,EAAY;AACR,YAAIA,GAAG,CAACC,IAAJ,KAAa,IAAjB,EAAuB;AACnB,gBAAMZ,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAACC,YAAAA,MAAM,EAAE,yBAAT;AAAoCM,YAAAA,MAAM,EAAE,CAAC;AAACI,cAAAA,SAAS,EAAE,sBAAZ;AAAoCR,cAAAA,OAAO,EAAE,OAAOA,OAAO,CAACK,QAAR,CAAiB,EAAjB,CAApD;AAA0EI,cAAAA,cAAc,EAAE;AAAEC,gBAAAA,IAAI,EAAE,YAAR;AAAsBC,gBAAAA,QAAQ,EAAE,EAAhC;AAAoCC,gBAAAA,MAAM,EAAE;AAA5C,eAA1F;AAAsJC,cAAAA,OAAO,EAAE,CAAC,+BAAD;AAA/J,aAAD;AAA5C,WAAxB,EACLC,KADK,CACEC,KAAD,IAAW;AACdd,YAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH,WAHK,CAAN;AAIH;AACJ;AACJ;AACJ;;AACDhB,EAAAA,UAAU;AAEVL,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAP;AACH,CAzBD,MAyBO;AACH,QAAMoB,QAAQ,GAAG,IAAIvB,IAAI,CAACwB,SAAL,CAAeC,YAAnB,CACb,+DADa,CAAjB;AAGExB,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASuB,QAAT,CAAP;AACD;;AAEL,eAAetB,IAAf,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import Web3 from \"web3\";\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n\n        window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n        async function runNetwork() {\n        const chainId = 4;\n\n        console.log(window.ethereum.networkVersion)\n        if (window.ethereum.networkVersion !== chainId) {\n            try {\n                await window.ethereum.request({method: 'wallet_switchEthereumChain', params: [{chainId: \"0x\" + chainId.toString(16)}]})\n            }\n            catch (err) {\n                if (err.code === 4902) {\n                    await window.ethereum.request({method: 'wallet_addEthereumChain', params: [{chainName: 'Rinkeby Test Network', chainId: \"0x\" + chainId.toString(16), nativeCurrency: { name: 'RinkebyETH', decimals: 18, symbol: 'RinkebyETH' }, rpcUrls: ['https://rinkeby.infura.io/v3/']}]})\n                    .catch((error) => {\n                        console.log(error)\n                    })\n                } \n            }\n        }\n    }\n    runNetwork()\n\n    web3 = new Web3(window.ethereum);\n} else {\n    const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/e74aebcb315d408089b16cb32f4e5f69\"\n      );\n      web3 = new Web3(provider);\n    }\n     \nexport default web3;\n\n//   // A Web3Provider wraps a standard Web3 provider, which is\n// // what MetaMask injects as window.ethereum into each page\n// const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n// // MetaMask requires requesting permission to connect users accounts\n// await provider.send(\"eth_requestAccounts\", []);\n\n// // The MetaMask plugin also allows signing transactions to\n// // send ether and pay to change state within the blockchain.\n// // For this, you need the account signer...\n// const signer = provider.getSigner()"]},"metadata":{},"sourceType":"module"}