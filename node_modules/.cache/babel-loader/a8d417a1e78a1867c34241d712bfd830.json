{"ast":null,"code":"var _jsxFileName = \"/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js\";\nimport React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DisplayInitalTask = _ref => {\n  let {\n    count\n  } = _ref;\n\n  const checkTask = async id => {\n    const accounts = await web3.eth.getAccounts();\n    await todo.methods.checkTask(id).send({\n      from: accounts[0]\n    });\n  };\n\n  const createTaskList = async () => {\n    const taskRows = [];\n    const initalTask = [];\n    let i;\n\n    for (i = 1; i < count; i++) {\n      const task = await todo.methods.initalTask(i).call(); // console.log(task);\n\n      initalTask.push(task);\n    }\n\n    console.log(initalTask);\n\n    for (i = 1; i < count; i++) {\n      if (i % 3 === 0) {\n        taskRows[i % 3 + 1] = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: initalTask[i - 3].id,\n                  onClick: () => checkTask(initalTask[i - 3].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 33,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: initalTask[i - 3].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 38,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: initalTask[i - 2].id,\n                  onClick: () => checkTask(initalTask[i - 2].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 45,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: initalTask[i - 2].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: initalTask[i - 1].id,\n                  onClick: () => checkTask(initalTask[i - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: initalTask[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this);\n      }\n\n      console.log(taskRows[0]);\n    }\n\n    const mod = i % 3;\n\n    if (mod != 3) {\n      if (mod == 1) {\n        const taskRow = /*#__PURE__*/_jsxDEV(Grid.Row, {\n          children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ui left floated compact segment\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"ui toggle checked checkbox\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: initalTask[i - 1].id,\n                  onClick: () => checkTask(initalTask[i - 1].id)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  children: initalTask[i - 1].content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this);\n\n        taskRows.push(taskRow);\n      } // else {\n      //     const taskRow = (\n      //         <Grid.Row>\n      //             <Grid.Column>\n      //                 <div className=\"ui left floated compact segment\">\n      //                     <div className=\"ui toggle checked checkbox\">\n      //                         <input \n      //                         type=\"checkbox\" \n      //                         name={initalTask[i-2].id}\n      //                         onClick={() => checkTask(initalTask[i-2].id)}\n      //                         ></input>\n      //                         <label>{initalTask[i-2].content}</label>\n      //                     </div>\n      //                 </div>\n      //             </Grid.Column>\n      //             <Grid.Column>\n      //                 <div className=\"ui left floated compact segment\">\n      //                     <div className=\"ui toggle checked checkbox\">\n      //                         <input \n      //                         type=\"checkbox\" \n      //                         name={initalTask[i-1].id}\n      //                         onClick={() => checkTask(initalTask[i-1].id)}\n      //                         ></input>\n      //                         <label>{initalTask[i-1].content}</label>\n      //                     </div>\n      //                 </div>\n      //             </Grid.Column>\n      //         </Grid.Row>\n      //     )\n      //     taskRows.push(taskRow);\n      // }\n\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    columns: 3,\n    divided: true,\n    children: createTaskList()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n\n_c = DisplayInitalTask;\nexport default DisplayInitalTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayInitalTask\");","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainWork/web3-coding-test/src/components/DisplayTasks.js"],"names":["React","useEffect","useState","todo","web3","Grid","DisplayInitalTask","count","checkTask","id","accounts","eth","getAccounts","methods","send","from","createTaskList","taskRows","initalTask","i","task","call","push","console","log","content","mod","taskRow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport todo from '../ethereum/todo.js';\nimport web3 from '../ethereum/web3';\nimport { Grid } from 'semantic-ui-react';\n\nconst DisplayInitalTask = ({count}) => {\n\n    const checkTask = async(id) => {\n        const accounts = await web3.eth.getAccounts();\n        await todo.methods.checkTask(id).send({from: accounts[0]});\n    }\n\n    const createTaskList = async() => {\n        const taskRows = [];\n        const initalTask = [];\n\n        let i;\n        for (i = 1; i < count; i++){\n            const task = await todo.methods.initalTask(i).call();\n            // console.log(task);\n            initalTask.push(task);\n        }\n        console.log(initalTask)\n\n        for (i = 1; i < count; i++){\n\n            if (i % 3 === 0) {\n                taskRows[i % 3 + 1] = (\n                    <Grid.Row>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={initalTask[i-3].id}\n                                    onClick={() => checkTask(initalTask[i-3].id)}\n                                    ></input>\n                                    <label>{initalTask[i-3].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={initalTask[i-2].id}\n                                    onClick={() => checkTask(initalTask[i-2].id)}\n                                    ></input>\n                                    <label>{initalTask[i-2].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={initalTask[i-1].id}\n                                    onClick={() => checkTask(initalTask[i-1].id)}\n                                    ></input>\n                                    <label>{initalTask[i-1].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                )\n            }\n            console.log(taskRows[0])\n        }\n        const mod = i % 3;\n        if (mod != 3){\n            if (mod == 1){\n                const taskRow = (\n                    <Grid.Row>\n                        <Grid.Column>\n                            <div className=\"ui left floated compact segment\">\n                                <div className=\"ui toggle checked checkbox\">\n                                    <input \n                                    type=\"checkbox\" \n                                    name={initalTask[i-1].id}\n                                    onClick={() => checkTask(initalTask[i-1].id)}\n                                    ></input>\n                                    <label>{initalTask[i-1].content}</label>\n                                </div>\n                            </div>\n                        </Grid.Column>\n                    </Grid.Row>\n                )\n                taskRows.push(taskRow);\n            }\n            // else {\n            //     const taskRow = (\n            //         <Grid.Row>\n            //             <Grid.Column>\n            //                 <div className=\"ui left floated compact segment\">\n            //                     <div className=\"ui toggle checked checkbox\">\n            //                         <input \n            //                         type=\"checkbox\" \n            //                         name={initalTask[i-2].id}\n            //                         onClick={() => checkTask(initalTask[i-2].id)}\n            //                         ></input>\n            //                         <label>{initalTask[i-2].content}</label>\n            //                     </div>\n            //                 </div>\n            //             </Grid.Column>\n            //             <Grid.Column>\n            //                 <div className=\"ui left floated compact segment\">\n            //                     <div className=\"ui toggle checked checkbox\">\n            //                         <input \n            //                         type=\"checkbox\" \n            //                         name={initalTask[i-1].id}\n            //                         onClick={() => checkTask(initalTask[i-1].id)}\n            //                         ></input>\n            //                         <label>{initalTask[i-1].content}</label>\n            //                     </div>\n            //                 </div>\n            //             </Grid.Column>\n            //         </Grid.Row>\n            //     )\n            \n            //     taskRows.push(taskRow);\n            // }\n        }\n        return (\n            <>\n\n            </>\n        )\n    }\n\n    return (\n        <Grid columns={3} divided>\n            {createTaskList()}\n        </Grid>\n    )\n}\n\nexport default DisplayInitalTask;"]},"metadata":{},"sourceType":"module"}