{"ast":null,"code":"import Web3 from \"web3\";\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  window.ethereum.request({\n    method: \"eth_requestAccounts\"\n  });\n  web3 = new Web3(window.ethereum);\n} else {\n  const provider = new Web3.providers.HttpProvider(\"https://rinkeby.infura.io/v3/e74aebcb315d408089b16cb32f4e5f69\");\n  web3 = new Web3(provider);\n}\n\nexport default web3; //   // A Web3Provider wraps a standard Web3 provider, which is\n// // what MetaMask injects as window.ethereum into each page\n// const provider = new ethers.providers.Web3Provider(window.ethereum)\n// // MetaMask requires requesting permission to connect users accounts\n// await provider.send(\"eth_requestAccounts\", []);\n// // The MetaMask plugin also allows signing transactions to\n// // send ether and pay to change state within the blockchain.\n// // For this, you need the account signer...\n// const signer = provider.getSigner()","map":{"version":3,"sources":["/Users/erikmacinnis/Desktop/BlockChainProjects/EthereumTodoApp/src/ethereum/web3.js"],"names":["Web3","web3","window","ethereum","request","method","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAIC,IAAJ;;AAEA,IAAI,OAAOC,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACC,QAAd,KAA2B,WAAhE,EAA6E;AAEzED,EAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAxB;AAEAJ,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASE,MAAM,CAACC,QAAhB,CAAP;AACH,CALD,MAKO;AACH,QAAMG,QAAQ,GAAG,IAAIN,IAAI,CAACO,SAAL,CAAeC,YAAnB,CACb,+DADa,CAAjB;AAGEP,EAAAA,IAAI,GAAG,IAAID,IAAJ,CAASM,QAAT,CAAP;AACD;;AAEL,eAAeL,IAAf,C,CAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import Web3 from \"web3\";\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n\n    window.ethereum.request({ method: \"eth_requestAccounts\" });\n\n    web3 = new Web3(window.ethereum);\n} else {\n    const provider = new Web3.providers.HttpProvider(\n        \"https://rinkeby.infura.io/v3/e74aebcb315d408089b16cb32f4e5f69\"\n      );\n      web3 = new Web3(provider);\n    }\n     \nexport default web3;\n\n//   // A Web3Provider wraps a standard Web3 provider, which is\n// // what MetaMask injects as window.ethereum into each page\n// const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n// // MetaMask requires requesting permission to connect users accounts\n// await provider.send(\"eth_requestAccounts\", []);\n\n// // The MetaMask plugin also allows signing transactions to\n// // send ether and pay to change state within the blockchain.\n// // For this, you need the account signer...\n// const signer = provider.getSigner()"]},"metadata":{},"sourceType":"module"}